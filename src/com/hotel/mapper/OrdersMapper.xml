<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.mapper.OrdersMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.pojo.Orders" >
    <id column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="client_id" property="clientId" jdbcType="INTEGER" />
    <result column="create_employee_id" property="createEmployeeId" jdbcType="INTEGER" />
    <result column="check_employee_id" property="checkEmployeeId" jdbcType="INTEGER" />
    <result column="pay_employee_id" property="payEmployeeId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="total_price" property="totalPrice" jdbcType="DOUBLE" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <association column="client_id" property="client" select="com.hotel.mapper.ClientMapper.selectByPrimaryKey"></association>
    <association column="create_employee_id" property="createEmployee" select="com.hotel.mapper.EmployeeMapper.selectByPrimaryKey"></association>
    <association column="check_employee_id" property="checkEmployee" select="com.hotel.mapper.EmployeeMapper.selectByPrimaryKey"></association>
    <association column="pay_employee_id" property="payEmployee" select="com.hotel.mapper.EmployeeMapper.selectByPrimaryKey"></association>
    <association column="order_id" property="orderDetail" select="com.hotel.mapper.OrderDetailMapper.selectByOrderId" ></association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    order_id, client_id, create_employee_id, check_employee_id, pay_employee_id, status, 
    total_price, date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hotel.pojo.OrdersExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hotel.pojo.OrdersExample" >
    delete from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hotel.pojo.Orders" >
    insert into orders (order_id, client_id, create_employee_id, 
      check_employee_id, pay_employee_id, status, 
      total_price, date)
    values (#{orderId,jdbcType=INTEGER}, #{clientId,jdbcType=INTEGER}, #{createEmployeeId,jdbcType=INTEGER}, 
      #{checkEmployeeId,jdbcType=INTEGER}, #{payEmployeeId,jdbcType=INTEGER}, #{status,jdbcType=VARCHAR}, 
      #{totalPrice,jdbcType=DOUBLE}, #{date,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.pojo.Orders" >
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="clientId != null" >
        client_id,
      </if>
      <if test="createEmployeeId != null" >
        create_employee_id,
      </if>
      <if test="checkEmployeeId != null" >
        check_employee_id,
      </if>
      <if test="payEmployeeId != null" >
        pay_employee_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
      <if test="date != null" >
        date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="clientId != null" >
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="createEmployeeId != null" >
        #{createEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="checkEmployeeId != null" >
        #{checkEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="payEmployeeId != null" >
        #{payEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="date != null" >
        #{date,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hotel.pojo.OrdersExample" resultType="java.lang.Integer" >
    select count(*) from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update orders
    <set >
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.clientId != null" >
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.createEmployeeId != null" >
        create_employee_id = #{record.createEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="record.checkEmployeeId != null" >
        check_employee_id = #{record.checkEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="record.payEmployeeId != null" >
        pay_employee_id = #{record.payEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.totalPrice != null" >
        total_price = #{record.totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.date != null" >
        date = #{record.date,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update orders
    set order_id = #{record.orderId,jdbcType=INTEGER},
      client_id = #{record.clientId,jdbcType=INTEGER},
      create_employee_id = #{record.createEmployeeId,jdbcType=INTEGER},
      check_employee_id = #{record.checkEmployeeId,jdbcType=INTEGER},
      pay_employee_id = #{record.payEmployeeId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=VARCHAR},
      total_price = #{record.totalPrice,jdbcType=DOUBLE},
      date = #{record.date,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.pojo.Orders" >
    update orders
    <set >
      <if test="clientId != null" >
        client_id = #{clientId,jdbcType=INTEGER},
      </if>
      <if test="createEmployeeId != null" >
        create_employee_id = #{createEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="checkEmployeeId != null" >
        check_employee_id = #{checkEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="payEmployeeId != null" >
        pay_employee_id = #{payEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=TIMESTAMP},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.pojo.Orders" >
    update orders
    set client_id = #{clientId,jdbcType=INTEGER},
      create_employee_id = #{createEmployeeId,jdbcType=INTEGER},
      check_employee_id = #{checkEmployeeId,jdbcType=INTEGER},
      pay_employee_id = #{payEmployeeId,jdbcType=INTEGER},
      status = #{status,jdbcType=VARCHAR},
      total_price = #{totalPrice,jdbcType=DOUBLE},
      date = #{date,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
</mapper>